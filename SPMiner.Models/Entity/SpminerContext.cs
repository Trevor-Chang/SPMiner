// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using SPMiner.Models;
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using SPMiner.Models;

namespace SPMiner.Models.Entity
{
    public partial class SpminerContext : DbContext
    {
        public SpminerContext()
        {
        }

        public SpminerContext(DbContextOptions<SpminerContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Admin> Admins { get; set; }
        public virtual DbSet<Task> Tasks { get; set; }
        public virtual DbSet<User> Users { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Admin>(entity =>
            {
                entity.ToTable("Admin");

                entity.Property(e => e.Id).HasComment("資料編號");

                entity.Property(e => e.Account)
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasComment("帳號");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("資料建立日期");

                entity.Property(e => e.Creator).HasComment("資料建立人員編號");

                entity.Property(e => e.EditDate)
                    .HasColumnType("datetime")
                    .HasComment("資料異動日期");

                entity.Property(e => e.Editor).HasComment("資料異動人員編號");

                entity.Property(e => e.Email)
                    .HasMaxLength(50)
                    .HasComment("信箱");

                entity.Property(e => e.Password)
                    .IsRequired()
                    .HasComment("密碼");

                entity.Property(e => e.Status).HasComment("資料狀態");
            });

            modelBuilder.Entity<Task>(entity =>
            {
                entity.HasKey(e => new { e.Id, e.TaskId })
                    .HasName("PK_Task_M");

                entity.Property(e => e.Id)
                    .HasComment("資料編號")
                    .ValueGeneratedOnAdd();

                entity.Property(e => e.TaskId)
                    .HasMaxLength(50)
                    .HasComment("社群上文章的Id");

                entity.Property(e => e.CreateDate)
                    .HasColumnType("datetime")
                    .HasComment("資料建立日期");

                entity.Property(e => e.Creator).HasComment("資料建立人員編號");

                entity.Property(e => e.EditDate)
                    .HasColumnType("datetime")
                    .HasComment("資料異動日期");

                entity.Property(e => e.Editor).HasComment("資料異動人員編號");

                entity.Property(e => e.Status).HasComment("資料狀態");

                entity.Property(e => e.TaskCount).HasComment("執行次數");

                entity.Property(e => e.TaskPrice)
                    .HasColumnType("decimal(10, 2)")
                    .HasComment("售價");

                entity.Property(e => e.TaskUrl)
                    .IsRequired()
                    .HasMaxLength(200)
                    .HasComment("文章連結");
            });

            modelBuilder.Entity<User>(entity =>
            {
                entity.Property(e => e.CreateDate).HasColumnType("datetime");

                entity.Property(e => e.EditDate).HasColumnType("datetime");

                entity.Property(e => e.ParentId).HasComment("當同一使用者有其他帳號要綁定在當前帳號上時,使用Parent找出上層主帳號");

                entity.Property(e => e.SocialId)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("社交平台ID");

                entity.Property(e => e.SocialType).HasComment("平台類別(FB、IG etc.)");

                entity.Property(e => e.UserName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasComment("使用者名稱");

                entity.Property(e => e.UserPicture)
                    .HasMaxLength(300)
                    .HasComment("使用者社交平台上的照片");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}